TODO
====

- Document CustomBlockDefinition and CustomFunctionDefinition.


Cleanup
-------

Change all use of Exception to ezcTemplateInternalException.

Remove all use of 'elements' in the parsers, use only 'children' not
both.

Minor features
--------------

Maybe support automatic string concat for constant strings::

  "abc\n"
  "def\n"

becomes::

  "abc\n" . "def\n"

Tests
-----

Unit tests
----------
- ezcTemplateConfiguration
  * addExtension - needs to check if $customClass does actually exists
    + test for it

Parsing
-------

Make sure case-checking is done for all elements, even blocks.
{Foreach} is not allowed.


Nodes
-----

Make sure the 'if' works in the same way in TST as in AST. That means
'if' has two children, the first is the normal body while the second
is the next else/elseif.

Generator
---------

The AstToPhp should not write the open/close markers ( <?php ?> ),
instead they should be part of the node tree (Created by TST2AST
visitor).


Syntax errors
-------------


Caching
-------
- Check {custom_block}


Version number
--------------

Do we need a version number? 

To differentiate between other template engines, we rely on the path and template extension.
Newer versions of this template engine should be compatible with the older templates. 


Function typehints
------------------

A few functions (like: array_count() ) have specified what type the method will return. 
The type is TYPE_VALUE, TYPE_ARRAY, or both. If not specified it assumes that the return type is both,
which of course is true, but allows less type checking.



Future ideas
============

XML output
----------

Provide XML output (also input?) of TST/AST trees, this could provide
useful for advanced language tools.

Error messages
--------------

Some of the error message could be improved to make them clearer. Also
catching the errors in more correct places would help a lot.
Take a look at other languages like ADA/Pascal to get some ideas on
how to give good feedback.

Special syntax
--------------

Add support for parse-time constants like __LINE__ and __FILE__
(similar to PHP).


Debugging
---------

Add a 'debug' context which dumps the variable with var_export() or
something similar.


Importing objects
-----------------
Think about an {import} statement which can be used to import objects
etc. into template:
{import site}
{$site->title}
{import site as $siteData}

{import Math}
{$Math->rand( 5 )}


The importer could be implemented by the application to provide common
data without sending them (via include) all the time.

Method calls
------------
Think about how to do method calls, the class must be known and the
function must be allowed in the template language. Allowing any method
to be called could be fatal.
